{"version":3,"sources":["modules/typeahead.js"],"names":["angular","trigger","provider","container","this","defaults","keyboard","html","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","bodyEl","$typeahead","options","scope","$scope","$matches","extend","config","$resetMatches","$$postDigest","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$$rAF","value","controller","$render","$emit","prefixEvent","parentScope","length","l","isString","$viewValue","i","preventDefault","stopPropagation","keyCode","$digest","show","$timeout","$element","$onMouseDown","hide","on","$onKeyDown","element","TypeaheadFactory","$$phase","$root","$window","document","body","link","require","directive","restrict","falseValueRegExp","attr","key","bsOptions","test","parsedOptions","$parseOptions","typeahead","watchOptions","watchedOptions","$watchCollection","values","$match","replace","trim","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","isVisible","slice","$formatters","displayValue","modelValue","push","$getIndex","selected","$on","$isEmpty","val","destroy","isDefined","label","isObject","toString"],"mappings":"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","file":"modules/typeahead.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'filter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n\n      function TypeaheadFactory(element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function(){\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function(matches) {\n          scope.$matches = matches;\n          if(scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0: -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function(index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function(index) {\n          if(index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if(parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function() {\n          if(!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function(value) {\n          var l = scope.$matches.length, i = l;\n          if(!l) return;\n          for(i = l; i--;) {\n            if(scope.$matches[i].value === value) break;\n          }\n          if(i < 0) return;\n          return i;\n        };\n\n        $typeahead.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function(evt) {\n          if(!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if(evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          else if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function() {\n            $typeahead.$element && $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n            if(options.keyboard) {\n              element && element.on('keydown', $typeahead.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function() {\n          $typeahead.$element && $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if(options.keyboard) {\n            element && element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if(!options.autoSelect)\n            $typeahead.activate(-1);\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        element.attr('autocomplete' ,'false');\n\n        // Build proper bsOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if(filter) bsOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) bsOptions += ':' + comparator;\n        if(limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if(options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n          .then(function(values) {\n            // Prevent input with no future prospect if selectMode is truthy\n            // @TODO test selectMode\n            if(options.selectMode && !values.length && newValue.length > 0) {\n              controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n              return;\n            }\n            if(values.length > limit) values = values.slice(0, limit);\n            var isVisible = typeahead.$isVisible();\n            isVisible && typeahead.update(values);\n            // Do not re-queue an update if a correct value has been selected\n            if(values.length === 1 && values[0].value === newValue) return;\n            !isVisible && typeahead.update(values);\n            // Queue a new rendering that will leverage collection loading\n            controller.$render();\n          });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) return displayValue;\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (modelValue && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if(controller.$isEmpty(controller.$viewValue)) return element.val('');\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}