{"version":3,"sources":["modules/tooltip.js"],"names":["angular","target","provider","placement","this","defaults","templateUrl","template","contentTemplate","trigger","keyboard","html","show","title","type","delay","autoClose","bsEnabled","viewport","selector","padding","$get","String","htmlReplaceRegExp","$body","options","$tooltip","extend","config","split","enterAnimateCallback","scope","$emit","prefixEvent","leaveAnimateCallback","_tipToHide","leave","$isShown","element","blur","tipElement","nodeName","forEach","triggers","on","toggle","unbindTriggerEvents","enter","i","length","off","bindKeyboardEvents","$onKeyUp","isTouch","$onFocusElementMouseDown","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$timeout","hide","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","$element","rect","stopPropagation","width","elRect","height","p","top","left","dimensions","offset","el","scroll","isBody","document","documentElement","$window","getCalculatedOffset","position","actualWidth","actualHeight","outerDims","clientWidth","innerHeight","tip","marginTop","parseInt","using","props","css","isNaN","right","marginLeft","setOffset","delta","getViewportAdjustedDelta","isVertical","replaceArrow","arrowDelta","test","arrowOffsetPosition","viewportPadding","topEdgeOffset","$viewport","viewportDimensions","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","findElement","$arrow","clearTimeout","timeout","tipScope","$destroy","$$phase","$options","$promise","$bsCompiler","compile","$scope","$new","$rootScope","toLowerCase","$id","attr","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","id","$hide","setEnabled","isEnabled","compileData","promise","then","init","container","tipContainer","bindTriggerEvents","isElement","destroyTipElement","hoverState","parent","after","lastChild","display","visibility","link","clonedElement","safeDigest","version","minor","addClass","animation","$animate","customClass","$$rAF","$applyPlacement","focus","_blur","replace","elementPosition","autoPlace","originalPlacement","containerPosition","indexOf","tipHeight","removeClass","tipPosition","applyPlacement","tipWidth","evt","preventDefault","fetchTemplate","fetchPromises","cache","$templateCache","res","isString","directive","$location","restrict","falseValueRegExp","transclusion","dataTarget","key","isDefined","hasOwnProperty","oldValue","tooltip","$observe","newValue","bsTooltip","$watch","isObject","bsShow","match","setViewport","$on","destroy"],"mappings":"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","file":"modules/tooltip.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      contentTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n       selector: 'body',\n       padding: 0\n      }\n    };\n\n    this.$get = function($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var trim = String.prototype.trim;\n      var isTouch = 'createTouch' in $window.document;\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory(element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if(options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if(options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function(isEnabled) {\n          scope.$$postDigest(function() {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout, hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData, tipElement, tipContainer, tipScope;\n        promise.then(function(data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function() {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if(options.container === 'self') {\n            tipContainer = element;\n          } else if(angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if(options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if(options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function() {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function() {\n            if (hoverState ==='in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function() {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent, after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if(tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function(clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if(options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if(options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          after ? after.after(tipElement) : parent.prepend(tipElement);\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if(tipElement) tipElement.css({visibility: 'visible'});\n          });\n\n          // Bind events\n          if(options.keyboard) {\n            if(options.trigger !== 'focus') {\n              $tooltip.focus();\n            }\n            bindKeyboardEvents();\n          }\n\n          if(options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function(blur) {\n\n          if(!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if(options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if(options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if(_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function() {\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\n        };\n\n        $tooltip.focus = function() {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function(isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function(viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function() {\n          if(!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement,\n              autoToken = /\\s?auto?\\s?/i,\n              autoPlace  = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition(),\n              tipWidth = tipElement.prop('offsetWidth'),\n              tipHeight = tipElement.prop('offsetHeight');\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var container = options.container ? findElement(options.container) : element.parent();\n            var containerPosition = getPosition(container);\n\n            // Determine if the vertical placement\n            if (originalPlacement.indexOf('bottom') >= 0 && elementPosition.bottom + tipHeight > containerPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (originalPlacement.indexOf('top') >= 0 && elementPosition.top - tipHeight < containerPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            // Determine the horizontal placement\n            // The exotic placements of left and right are opposite of the standard placements.  Their arrows are put on the left/right\n            // and flow in the opposite direction of their placement.\n            if ((originalPlacement === 'right' || originalPlacement === 'bottom-left' || originalPlacement === 'top-left') &&\n                elementPosition.right + tipWidth > containerPosition.width) {\n\n              placement = originalPlacement === 'right' ? 'left' : placement.replace('left', 'right');\n            } else if ((originalPlacement === 'left' || originalPlacement === 'bottom-right' || originalPlacement === 'top-right') &&\n                elementPosition.left - tipWidth < containerPosition.left) {\n\n              placement = originalPlacement === 'left' ? 'right' : placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function(evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function(evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function(evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function(trigger) {\n            if(trigger === 'click') {\n              element.on('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          });\n        }\n\n        function unbindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if(trigger === 'click') {\n              element.off('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents() {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents() {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation(event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0],\n              isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\n          }\n          var elOffset = isBody ? { top: 0, left: 0 } : dimensions.offset(el),\n              scroll = { scroll:  isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0 },\n              outerDims = isBody ? { width: document.documentElement.clientWidth, height: $window.innerHeight } : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n          case 'right':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left + position.width\n            };\n            break;\n          case 'bottom':\n            offset = {\n              top: position.top + position.height,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          case 'left':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left - actualWidth\n            };\n            break;\n          default:\n            offset = {\n              top: position.top - actualHeight,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          }\n\n          if(!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if(split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n            case 'left':\n              offset.left = position.left;\n              break;\n            case 'right':\n              offset.left =  position.left + position.width - actualWidth;\n            }\n          } else if(split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n            case 'top':\n              offset.top = position.top - actualHeight;\n              break;\n            case 'bottom':\n              offset.top = position.top + position.height;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement(offset, placement) {\n          var tip = tipElement[0],\n              width = tip.offsetWidth,\n              height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10),\n              marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop  = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top  = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth,\n              actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement),\n                arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight,\n                arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        function getViewportAdjustedDelta(placement, position, actualWidth, actualHeight) {\n          var delta = { top: 0, left: 0 },\n              $viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          if (!$viewport) {\n           return delta;\n          }\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0,\n              viewportDimensions = getPosition($viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset    = position.top - viewportPadding - viewportDimensions.scroll,\n                bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset  = position.left - viewportPadding,\n                rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.width) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow(delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement() {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if($tooltip.$isShown && tipElement !== null) {\n            if(options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if(options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if(tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if(tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      var fetchPromises = {};\n      function fetchTemplate(template) {\n        if(fetchPromises[template]) return fetchPromises[template];\n        return (fetchPromises[template] = $http.get(template, {cache: $templateCache}).then(function(res) {\n          return res.data;\n        }));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if(angular.isDefined(dataTarget)) {\n          if(falseValueRegExp.test(dataTarget))\n            options.target = false;\n          else\n            options.target = dataTarget;\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')){\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function(newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && $$rAF(function() {\n              tooltip && tooltip.$applyPlacement();\n            });\n          }\n        });\n\n        // Support scope as an object\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.title = newValue;\n          }\n          angular.isDefined(oldValue) && $$rAF(function() {\n            tooltip && tooltip.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n          newValue === true ? tooltip.show() : tooltip.hide();\n        });\n\n        // Enabled binding support\n        attr.bsEnabled && scope.$watch(attr.bsEnabled, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n          newValue === false ? tooltip.setEnabled(false) : tooltip.setEnabled(true);\n        });\n\n        // Viewport support\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          tooltip.setViewport(newValue);\n        });\n\n        // Initialize popover\n        var tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}