{"version":3,"sources":["modules/parse-options.js"],"names":["angular","module","options","config","$parseOptions","$values","regexp","match","this","$get","$match","attr","displayFn","label","value","index","locals","valueName","scope","valueFn","ParseOptionsFactory","groupByFn","valuesFn","$parse","defaults","keyName","controller","valuesPromise","err","when","then","$q","values","displayValue","init"],"mappings":"AAOA,YAEAA,SAQQC,OAAIC,0CAAuCC,SAAAA,gBAAAA,WAPjD,GAQMC,GAAAA,KAAcC,UAPlBC,OAUQC,+KARVC,MAAKC,MAWGL,SAAcM,KAASH,SAAQI,EAAKJ,GAV1C,QAWMK,GAAyBD,EAAMJ,GAoBnC,QAoBcM,GAAOA,EAAAA,GAnBnB,MAmB0BC,GAAOA,IAAAA,SAAAA,EAAAA,GAlB/B,GAkB6CC,GAAAA,EAAPA,IAIxCX,OArBEY,GAAOC,GAAaV,EACpBM,EAAQD,EAAUM,EAAOF,GACzBF,EAAQK,EAAQD,EAAOF,IAoBzBH,MAAOT,EAjBHU,MAAOA,EAqBNM,MAAAA,KA3DP,GAaIC,MAEAC,EAAWC,QAAOhB,UAAMiB,EAAArB,EAb5BC,GAAcC,UAgBZD,IAAAA,GAAAA,EAAckB,EAAWG,EAAgBC,EAAAA,EAAAA,CA0B3C,OAxCAtB,GAeQuB,KAAAA,WACJvB,EAAAM,OAAAH,EAAAI,EAAAJ,MAAAL,EAAAI,QAdFM,EAgBIe,EAAgBL,EAAAA,IAASJ,EAAOQ,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAfpCL,EAgBUO,EAAAA,EAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,GAfVN,EAgBIK,EAAAA,EAAAA,KAdNvB,EAgBcyB,SAAKF,SACdG,EAAKJ,GAhBR,GAiBIC,EAhBJ,KACEA,EAAgBL,EAASJ,EAAOQ,GAkB9BtB,MAAAA,GACAuB,KAfJ,MAAOI,GAAGF,KAAKF,GAAeG,KAAK,SAASE,GAK1C,MAcF5B,SAAc6B,QAAAA,KACRf,MAEJd,EAAOQ,QAAUM,EAAAA,OAAAA,EAAAA,EAAAA,MAjBVd,EAAcC,WAGzBD,EAqBUY,aAAoBF,SAAAA,GApB5B,GAqBIE,KAnBJ,OADAE,GAqBIL,GAAQD,EACRE,EAAQK,IANdf,EAAc8B,OACP9B,EAET,MAAOgB","file":"modules/parse-options.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function() {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function($parse, $q) {\n\n      function ParseOptionsFactory(attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\n\n        $parseOptions.init = function() {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]),\n          valueName = match[4] || match[6],\n          keyName = match[5],\n          groupByFn = $parse(match[3] || ''),\n          valueFn = $parse(match[2] ? match[1] : valueName),\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function(scope, controller) {\n          var valuesPromise;\n          try {\n            // Might throw 'notarray' error since cea8e75\n            valuesPromise = valuesFn(scope, controller);\n          } catch(err) {\n            valuesPromise = [];\n          }\n          return $q.when(valuesPromise)\n          .then(function(values) {\n            if(!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function(modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues(values, scope) {\n          return values.map(function(match, index) {\n            var locals = {}, label, value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}